完成了词法分析的设计
token序列：
typedef  struct WORD
{
	string type;
	string word;
	struct WORD* next;
};
存放各类型单词的数组：
string Identifier[MAXIMUM_NUMBER_OF_Identifier];
string Constant[MAXIMUM_NUMBER_OF_Constant];
string Char[MAXIMUM_NUMBER_OF_Constant];
string String[MAXIMUM_NUMBER_OF_Constant];
关键字表：
void set_Type()
{
	Type[0] = "char";
	Type[1] = "int";
	Type[2] = "float";
	Type[3] = "string";
	Type[4] = "void";
	Type[5] = "include";
	Type[6] = "main";
	Type[7] = "struct";
	Type[8] = "if";
	Type[9] = "else";
	Type[10] = "for";
	Type[11] = "return";
	Type[12] = "break";
	Type[13] = "continue";
	Type[14] = "case";
	Type[15] = "while";
	Type[16] = "printf";
	Type[17] = "scanf";
	Type[18] = "stdio.h";
	Type[19] = "True";
	Type[20] = "False";
	Type[21] = "erro";
	Type[22] = "EOF";
}
界符表：
void set_0perator()
{
	Operator[0] = "+";
	Operator[1] = "-";
	Operator[2] = "*";
	Operator[3] = "/";
	Operator[4] = "=";
	Operator[5] = "{";
	Operator[6] = "}";
	Operator[7] = "$";
	Operator[8] = ":";
	Operator[9] = "#";
	Operator[10] = "!";
	Operator[11] = "%";
	Operator[12] = "&";
	Operator[13] = "(";
	Operator[14] = ")";
	Operator[15] = ";";
	Operator[16] = ",";
	Operator[17] = "?";
	Operator[18] = "[";
	Operator[19] = "]";
	Operator[20] = "|";
	Operator[21] = "<";
	Operator[22] = ">";
	Operator[23] = "!=";
	Operator[24] = "<=";
	Operator[25] = ">=";
	Operator[26] = "==";
	Operator[27] = "||";
	Operator[28] = "&&";
	Operator[29] = "++";
	Operator[30] = "--";
}
自动机实现读取token：
WORD* lexical_parser()
{
	WORD* word = new WORD;
	out_p = 0;
	get_ch();
	skip_sp();

	if (if_letter())//标识符、关键字
	{
		while (if_letter() || if_number())
		{
			concat();
			get_ch();
		}
		retract();

		word->num = if_Type();
		if (word->num)
		{
			word->type = "Key";
			word->word = out;
		}
		else
		{
			word->num = if_existing_Identifier();
			if (!word->num)
			{
				set_Identifier();
				Identifier_n++;
				word->num = Identifier_n;
			}
			word->type = "Identifier";
			word->word = out;
		}
	}
	else if (if_number())//常数
	{
		int isf = 0;
		while (if_number())
		{
			if (ch == 46)	isf = 1;
			concat();
			get_ch();
		}
		retract();

		word->num = if_existing_Constant();
		if (!word->num)
		{
			set_Constant();
			Constant_n++;
			word->num = Constant_n;
		}
		if (isf == 1)  word->type = "float";
		if (isf==0)    word->type = "int";
		word->word = out;
	}
	
	else if (ch == 39)//字符
	{
		concat();
		get_ch();
		concat();
		get_ch();
		if (ch == 39)
		{
			concat();
			word->num = if_existing_Char();
			if (!word->num)
			{
				set_Char();
				Char_n++;
				word->num = Char_n;
			}
			word->type = "Char";
			word->word = out;
		}
		else
		{
			retract();
			word->type = "error";
			word->num = -1;
			word->word = 39;
		}
	}
	else if (ch == 34)//字符串
	{
		do {
			concat();
			get_ch();
			if (ch == 10) {
				retract();
				word->type = "error";
				word->num = -1;
				word->word = out;
				return word;
			}
		} while (ch != 34);
		concat();
		word->num = if_existing_String();
		if (!word->num)
		{
			set_String();
			String_n++;
			word->num = String_n;
		}
		word->type = "String";
		word->word = out;
	}
	
	else if (if_mark())
	{
	switch (ch) {	//组合符号判断
	case'!': {
		concat();
		get_ch();
		if (ch == 61) concat();
		else retract();
		break;
		}
	case'=': {
		concat();
		get_ch();
		if (ch == 61) concat();
		else retract();
		break;
		}
	case'>': {
		concat();
		get_ch();
		if (ch == 61) concat();
		else retract();
		break;
	    }
	case'<': {
		concat();
		get_ch();
		if (ch == 61) concat();
		else retract();
		break;
		}
	case'|': {
		concat();
		get_ch();
		if (ch == 124) concat();
		else retract();
		break;
		}
	case'&': {
		concat();
		get_ch();
		if (ch == 38) concat();
		else retract();
		break;
		}
	case'/': {
		concat();
		get_ch();
		if (ch == 47) {
			concat();
			while (get_ch() != '\n') {
				concat();
			}
		}
		else retract();
		break;
		}
	case'+': {
		concat();
		get_ch();
		if (ch == 43) concat();
		else retract();
		break;
		}
	case'-': {
		concat();
		get_ch();
		if (ch == 45) concat();
		else retract();
		break;
		}
	default:
		concat();
	}
		word->num = if_Operator();
		if (word->num)
		{
			word->type = "Deli";
			word->word = out;
		}
		else
		{
			word->type = "error";
			word->num = -1;
			word->word = out;
		}
	}
	else if (ch == '\0')
	{
		word->type = "over";
		word->num = 0;
		word->word = "\0";
	}
	else
	{
		concat();
		word->type = "error";
		word->num = -1;
		word->word = out;
	}
	return word;
}
通过结构体与链表实现token序列集合，读取文件后把链表头指针传给符号表等。
